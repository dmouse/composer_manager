<?php

/**
 * @file
 * Provides consolidated management of third-party Composer-compatible packages
 * required by contributed modules.
 */

/**
 * Implements hook_menu().
 */
function composer_manager_menu() {
  $items = array();

  $items['admin/config/system/composer-manager'] = array(
    'title' => 'Composer Manager',
    'description' => 'View the status of packages managed by Composer and configure the location of the composer.json file and verdor directory.',
    'route_name' => 'composer_manager.packages_page',
  );

  return $items;
}

/**
 * Implements hook_menu_link_defaults().
 */
function mymodule_menu_link_defaults() {
  $links = array();

  $links['system.admin.config.system.composer_manager'] = array(
    'link_title' => 'Composer Manager',
    'description' => 'View the status of packages managed by Composer and configure the location of the composer.json file and verdor directory.',
    'parent' => 'system.admin.config.system',
    'route_name' => 'composer_manager.packages_page',
  );

  return $links;
}

/**
 * Implements hook_modules_enabled().
 *
 * @see composer_manager_write_if_changed()
 */
function composer_manager_modules_enabled($modules) {
  composer_manager_write_if_changed($modules);
}

/**
 * Implements hook_modules_uninstalled().
 *
 * @see composer_manager_write_if_changed()
 */
function composer_manager_modules_uninstalled($modules) {
  composer_manager_write_if_changed($modules);
}

/**
 * Writes the composer.json file if one of the enabled / disabled modules
 * has a composer.json file.
 *
 * This is a primitive check to ensure that the composer.json file is built only
 * when it has changes. This check always passes when run via the command line,
 * as it is assumed that Drush is being used to enable or disable the the
 * modules. A static boolean is also set flagging whether one or more modules
 * being acted on contains a composer.json file, which is used in Drush hooks.
 *
 * @param array $modules
 *   The enabled / disabled modules being scanned for a composer.json file.
 */
function composer_manager_write_if_changed(array $modules) {
  $changed = &drupal_static(__FUNCTION__, FALSE);
  if (Drupal::config('composer_manager.settings')->get('autobuild_file') || drupal_is_cli()) {
    if (composer_manager_has_composer_file($modules)) {
      $changed = TRUE;
      composer_manager_write_file();
    }
  }
}

/**
 * Returns TRUE if at least one module has a composer.json file.
 *
 * @param array $modules
 *   An array of modules being checked.
 *
 * @return boolean
 */
function composer_manager_has_composer_file(array $modules) {
  foreach ($modules as $module) {
    $module_path = drupal_get_path('module', $module);
    if (file_exists($module_path . '/composer.json')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Registers the autoloader for all third-party packages.
 */
function composer_manager_register_autoloader() {
  static $registered = FALSE;
  if (!$registered) {
    $autoloader = composer_manager_vendor_dir() . '/autoload.php';
    if (!file_exists($autoloader)) {
      $message = t('Autoloader not found: @file', array('@file' => $autoloader));
      throw new \RuntimeException($message);
    }
    $registered = TRUE;
    require $autoloader;
  }
}

/**
 * Writes the consolidated composer.json file for all modules that require
 * third-party packages managed by Composer.
 *
 * @return bool
 */
function composer_manager_write_file() {
  // Ensure only one process runs at a time. 10 seconds is more than enough.
  // It is rare that a conflict will happen, and it isn't mission critical that
  // we wait for the lock to release and regenerate the file again.
  if (!Drupal::lock()->acquire(__FUNCTION__, 10)) {
    return FALSE;
  }

  require_once __DIR__ . '/composer_manager.writer.inc';

  try {
    $data = composer_manager_fetch_data();
    $json = composer_manager_build_json($data);
    if ($json) {
      $dir_uri = Drupal::config('composer_manager.settings')->get('file_dir');
      composer_manager_put_file($dir_uri, $json);
    }
    $success = TRUE;
  }
  catch (\RuntimeException $e) {
    $success = FALSE;
    if (Drupal::currentUser()->hasPermission('administer site configuration')) {
      drupal_set_message(t('Error writing composer.json file'), 'error');
    }
    watchdog_exception('composer_manager', $e);
  }

  Drupal::lock()->release(__FUNCTION__);
  return $success;
}

/**
 * Returns the path to the vendor directory.
 *
 * @return string
 */
function composer_manager_vendor_dir() {

  $vendor_dir = Drupal::config('composer_manager.settings')->get('vendor_dir');
  $is_absolute = (0 === strpos($vendor_dir, '/'));
  if (!$is_absolute) {
    $vendor_dir = DRUPAL_ROOT . '/' . $vendor_dir;
  }
  return $vendor_dir;
}

